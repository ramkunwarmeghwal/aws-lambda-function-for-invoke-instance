#start or stop servers on the basis of their runnning state


import boto3
import json
region = 'ap-south-1'
instances = ['i-05cbc6e9ffqwerty','i-fghjkldfghjkl']
ec2 = boto3.client('ec2', region_name=region)

ec2_resource = boto3.resource('ec2', region_name=region)

def lambda_handler(event, context):
    try:
        for i in instances:
            instance = ec2_resource.Instance(i)
            if instance.state['Name'] == ('running' or 'pending'):
                  pass
            else:
                  ec2.start_instances(InstanceIds=i.split())
        # return {"statusCode": 200, "body": f"started instances: {str(instances)}"}
    except Exception as e:
         return {"error": str(e)}
    


# def lambda_handler(event, context):
#     try:
#         ec2.start_instances(InstanceIds=instances)
#         return {"statusCode": 200, "body": f"started instances: {str(instances)}"}
#     except Exception as e:
#         return {"error": str(e)}






import boto3
import json
region = 'ap-south-1'
ec2 = boto3.client('ec2', region_name=region)
ec2_resource = boto3.resource('ec2', region_name=region)

instances = ['i-lkjhgfd','i-fghjkl;']

def lambda_handler(event, context):
    try:
        for i in instances:
            instance = ec2_resource.Instance(i)
            if instance.state['Name'] == ('stopped' or 'stopping'):
                 pass
            else:
                ec2.stop_instances(InstanceIds=i.split())
    except Exception as e:
         return {"error": str(e)}


# def lambda_handler(event, context):
#     try:
#         ec2.stop_instances(InstanceIds=instances)
#         return {"statusCode": 200, "body": f"stopped instances: {str(instances)}"}
#     except Exception as e:
#         return {"error": str(e)}










