import json
import boto3
import sys
from datetime import datetime, timedelta
from datetime import date
import urllib3

def trans_vertica():
     client = boto3.client('cloudwatch')
     response = client.get_metric_statistics(
            Namespace='AWS/EC2',
            MetricName='CPUUtilization',
            Dimensions=[
                {
                'Name': 'InstanceId',
                'Value': 'i-07627f8efd3f5b6fa'
                },
            ],
            StartTime = datetime.utcnow() - timedelta(minutes = 5),
            EndTime = datetime.utcnow(),
            Period=60000,
            Statistics=[
                'Maximum',
            ],
            Unit='Percent'
        )
        
     l = []
     for i in response['Datapoints']:
            l.append(i)
    #  return json.dumps(int(l[0]['Maximum']), default=str)
     
     if int(l[0]['Maximum']) >= 65 :
          cpu = "CPU Utilization of Trans Vertica IS : " + str(int(l[0]['Maximum']))
    #  return cpu
          http = urllib3.PoolManager()
          data = {"text": cpu}
          r = http.request("POST","https://hooks.slack.com/services/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", 
                        body = json.dumps(data),
                        headers = {"Content-Type":"application/json"})
#########################################################################################################################
















#start or stop servers on the basis of their runnning state


import boto3
import json
region = 'ap-south-1'
instances = ['i-05cbc6e9ffqwerty','i-fghjkldfghjkl']
ec2 = boto3.client('ec2', region_name=region)

ec2_resource = boto3.resource('ec2', region_name=region)

def lambda_handler(event, context):
    try:
        for i in instances:
            instance = ec2_resource.Instance(i)
            if instance.state['Name'] == ('running' or 'pending'):
                  pass
            else:
                  ec2.start_instances(InstanceIds=i.split())
        # return {"statusCode": 200, "body": f"started instances: {str(instances)}"}
    except Exception as e:
         return {"error": str(e)}
    


# def lambda_handler(event, context):
#     try:
#         ec2.start_instances(InstanceIds=instances)
#         return {"statusCode": 200, "body": f"started instances: {str(instances)}"}
#     except Exception as e:
#         return {"error": str(e)}






import boto3
import json
region = 'ap-south-1'
ec2 = boto3.client('ec2', region_name=region)
ec2_resource = boto3.resource('ec2', region_name=region)

instances = ['i-lkjhgfd','i-fghjkl;']

def lambda_handler(event, context):
    try:
        for i in instances:
            instance = ec2_resource.Instance(i)
            if instance.state['Name'] == ('stopped' or 'stopping'):
                 pass
            else:
                ec2.stop_instances(InstanceIds=i.split())
    except Exception as e:
         return {"error": str(e)}


# def lambda_handler(event, context):
#     try:
#         ec2.stop_instances(InstanceIds=instances)
#         return {"statusCode": 200, "body": f"stopped instances: {str(instances)}"}
#     except Exception as e:
#         return {"error": str(e)}










